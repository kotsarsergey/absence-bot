import { Bot, InlineKeyboard, session } from "grammy";
import {
  getUser,
  upsertUser,
  insertHistory,
  User,
  getAdmins,
  History,
} from "../db/db-service";
import { TELEGRAM_BOT_TOKEN } from "../utils/environment";
import {
  createInitialSessionData,
  MyContext,
  MyConversation,
} from "./interfaces/custom-context.interface";
import { conversations, createConversation } from "@grammyjs/conversations";

async function notifyAllAdmins(historyRecord: History, user: string) {
  const admins: User[] = await getAdmins();
  console.log(
    `Starting to send notifications to following admins: \n${JSON.stringify(
      admins
    )}`
  );

  if (admins.length > 0) {
    for (let admin of admins) {
      await bot.api.sendMessage(
        admin.id,
        "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –Ω–æ–≤–æ–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ:\n" +
          `_*–û—Ç*_: ${user}\n` +
          `_*–ü—Ä–∏—á–∏–Ω–∞*_: ${historyRecord.reason.replace(/\./g, "\\.")}\n` +
          `_*–î–∞—Ç–∞*_: ${historyRecord.date
            .toLocaleString('ru-RU')
            .replace(/\./g, "\\.")}`,
        { parse_mode: "MarkdownV2" }
      );
    }
  } else {
    console.log("Admins has not been found");
  }

  return true;
}

async function registeringConversation(
  conversation: MyConversation,
  ctx: MyContext
) {
  await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è: ");
  const { message } = await conversation.wait();
  await ctx.reply(`–í–≤–µ–¥–µ–Ω–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞:*\n${message?.text}*`, {
    parse_mode: "MarkdownV2",
  });

  const historyRecord = await insertHistory({
    //@ts-ignore
    user_id: ctx.session.userId,
    reason: message?.text || "",
    date: new Date(),
  });

  await notifyAllAdmins(historyRecord, ctx.session.name);
  const answer = "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é!\n–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ –ª–∏—Ü–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω—ã.\n";

  if (ctx.session.isAdmin) {
    await ctx.reply(answer, { reply_markup: adminMenu() });
  } else {
    await ctx.reply(answer, { reply_markup: simpleMenu() });
  }

  return;
}

async function changeNameConversation(
  conversation: MyConversation,
  ctx: MyContext
) {
  await ctx.reply(
    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º—è, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –≤ –æ—Ç—á–µ—Ç–∞—Ö" +
      "\n_*–í–∞–∂–Ω–æ*_: –∏–º—è –∞–∫–∫–∞—É–Ω—Ç–∞ —Ç–∞–∫ –∂–µ –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –æ—Ç—á–µ—Ç, —Ç–∞–∫ —á—Ç–æ –≤–∞–º –Ω–µ —Å–ø—Ä—è—Ç–∞—Ç—å—Å—èüòà",
    { parse_mode: "MarkdownV2" }
  );
  const { message } = await conversation.wait();

  await upsertUser({
    //@ts-ignore
    id: ctx.session.userId,
    username: ctx.msg?.from?.username,
    name: message?.text,
    isAdmin: ctx.session.isAdmin,
    isNotifications: !ctx.session.isNotifications,
  });

  await ctx.reply(`–í–≤–µ–¥–µ–Ω–Ω–æ–µ –∏–º—è:*\n${message?.text}*`, {
    parse_mode: "MarkdownV2",
  });

  const answer = "–ò–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ.\n";

  if (ctx.session.isAdmin) {
    await ctx.reply(answer, { reply_markup: adminMenu() });
  } else {
    await ctx.reply(answer, { reply_markup: simpleMenu() });
  }

  return;
}

function adminMenu(): InlineKeyboard {
  return simpleMenu()
    .row()
    .text("–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "notifications")
    .row()
    .text("–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–≥—É–ª–æ–≤", "getHistory");
}

function simpleMenu(): InlineKeyboard {
  return new InlineKeyboard()
    .text("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ", "register")
    .row()
    .text("–ü–æ–º–µ–Ω—è—Ç—å –∏–º—è", "changeName")
    .row()
    .text("–í—ã—Ö–æ–¥", "exit");
}

const bot = new Bot<MyContext>(TELEGRAM_BOT_TOKEN);
bot.use(session({ initial: () => createInitialSessionData() }));
bot.use(conversations());
bot.use(createConversation(registeringConversation));
bot.use(createConversation(changeNameConversation));
bot.api.setMyCommands([{ command: "start", description: "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞" }]);

bot.command("start", async (ctx) => {
  let userInfo = await getUser(ctx.msg.chat.id);

  if (!userInfo) {
    userInfo = await upsertUser({
      //@ts-ignore
      id: ctx.msg?.from?.id,
      username: ctx.msg?.from?.username,
      name: `${ctx.msg.from?.first_name} ${ctx.msg.from?.last_name}`,
      isAdmin: false,
      isNotifications: false,
    });
  }

  ctx.session = {
    userId: userInfo.id,
    isAdmin: userInfo.is_admin,
    name: userInfo.name,
    isNotifications: userInfo.is_notifications,
  };

  const helloText = `–î–æ–±—Ä—ã–π –¥–µ–Ω—å, ${ctx.session.name}`;
  if (ctx.session.isAdmin) {
    await ctx.reply(helloText, { reply_markup: adminMenu() });
  } else {
    await ctx.reply(helloText, { reply_markup: simpleMenu() });
  }
});

bot.callbackQuery("exit", async (ctx) => {
  //@ts-ignore
  await ctx.api.editMessageReplyMarkup(ctx.chat?.id, ctx.msg?.message_id, {
    remove_keyboard: true,
  });
  await ctx.answerCallbackQuery("–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!");
  delete ctx.session.userId;
});

bot.callbackQuery("register", async (ctx) => {
  if (!ctx.session.userId) {
    await ctx.answerCallbackQuery("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start");
    return;
  }
  //@ts-ignore
  await ctx.api.editMessageReplyMarkup(ctx.chat?.id, ctx.msg?.message_id, {
    remove_keyboard: true,
  });
  await ctx.conversation.enter("registeringConversation");
});

bot.callbackQuery("notifications", async (ctx) => {
  if (!ctx.session.userId) {
    await ctx.answerCallbackQuery("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start");
    return;
  }

  await upsertUser({
    //@ts-ignore
    id: ctx.session.userId,
    username: ctx.msg?.from?.username,
    name: ctx.session.name,
    isAdmin: ctx.session.isAdmin,
    isNotifications: !ctx.session.isNotifications,
  });

  ctx.session.isNotifications = !ctx.session.isNotifications;

  await ctx.answerCallbackQuery(
    `–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ${ctx.session.isNotifications ? "–≤–∫–ª—é—á–µ–Ω—ã" : "–≤—ã–∫–ª—é—á–µ–Ω—ã"}`
  );
});

bot.callbackQuery("changeName", async (ctx) => {
  if (!ctx.session.userId) {
    await ctx.answerCallbackQuery("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start");
    return;
  }
  //@ts-ignore
  await ctx.api.editMessageReplyMarkup(ctx.chat?.id, ctx.msg?.message_id, {
    remove_keyboard: true,
  });
  await ctx.conversation.enter("changeNameConversation");
});

export { bot };
